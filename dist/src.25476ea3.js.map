{"version":3,"sources":["../node_modules/@goodleby/lib/build/goodlebyLib.js","components/cell.ts","components/step.ts","components/mine.ts","components/game.ts","index.ts"],"names":[],"mappings":"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","file":"src.25476ea3.js","sourceRoot":"../src","sourcesContent":["/*! For license information please see goodlebyLib.js.LICENSE.txt */\n!function(n,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.goodlebyLib=t():n.goodlebyLib=t()}(self,(function(){return function(){\"use strict\";var n={d:function(t,r){for(var e in r)n.o(r,e)&&!n.o(t,e)&&Object.defineProperty(t,e,{enumerable:!0,get:r[e]})},o:function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},r:function(n){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(n,\"__esModule\",{value:!0})}},t={};n.r(t),n.d(t,{addTime:function(){return E},camelize:function(){return b},countDecimals:function(){return i},debounce:function(){return j},filterPhone:function(){return M},floorTo:function(){return u},gcd:function(){return c},getDOM:function(){return x},getMatrix:function(){return m},getMatrixClone:function(){return p},getMemoizedFn:function(){return S},getPrimes:function(){return P},getRandBool:function(){return e},getRandNum:function(){return r},getRandPrime:function(){return z},getScrollbarHeight:function(){return L},getScrollbarWidth:function(){return A},linearMatrixDot:function(){return h},matrixApply:function(){return s},matrixDot:function(){return a},matrixMinus:function(){return l},matrixPlus:function(){return f},onSwipe:function(){return O},popSlash:function(){return d},regexpEscape:function(){return y},relativeUrl:function(){return g},roundTo:function(){return o},shuffleArr:function(){return T},stringReplace:function(){return w},transposeMatrix:function(){return v}});var r=function(n,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],e=Math.floor(Math.random()*(t-n+1-r.length)+n);return r.sort((function(n,t){return n-t})).every((function(n){return n<=e&&(e++,!0)})),e},e=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:.5;return Math.random()<n},o=function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return Math.round(n*Math.pow(10,t))/Math.pow(10,t)},u=function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return Math.floor(n*Math.pow(10,t))/Math.pow(10,t)},i=function(n){return Math.floor(n)!==n?n.toString().split(\".\")[1].length:0},c=function n(t,r){return 0===r?t:n(r,t%r)},a=function(n,t){var r=[n,t],e=r.map((function(n){return n[0].length}));if(!r.every((function(n,t){return n.every((function(n){return n.length===e[t]}))})))throw new Error(\"All rows in a matrix must have an equal amount of columns\");if(e[0]!==t.length)throw new Error(\"Amount of columns in the 1st matrix must match an amount of rows in the 2nd matrix\");return n.map((function(n){return t[0].map((function(r,e){return n.reduce((function(n,r,o){return n+r*t[o][e]}),0)}))}))},f=function(n,t){var r=[n,t],e=n[0].length;if(!r.every((function(n){return n.every((function(n){return n.length===e}))}))||n.length!==t.length)throw new Error(\"Matrices must be same size\");return n.map((function(n,r){return n.map((function(n,e){return n+t[r][e]}))}))},l=function(n,t){var r=[n,t],e=n[0].length;if(!r.every((function(n){return n.every((function(n){return n.length===e}))}))||n.length!==t.length)throw new Error(\"Matrices must be same size\");return n.map((function(n,r){return n.map((function(n,e){return n-t[r][e]}))}))},h=function(n,t){var r=[n,t],e=n[0].length;if(!r.every((function(n){return n.every((function(n){return n.length===e}))}))||n.length!==t.length)throw new Error(\"Matrices must be same size\");return n.map((function(n,r){return n.map((function(n,e){return n*t[r][e]}))}))},s=function(n,t){return n.map((function(n,r){return n.map((function(n,e){return t(n,e,r)}))}))},m=function(n,t,r){return Array(n).fill(0).map((function(n,e){return Array(t).fill(0).map((function(n,t){return r(t,e)}))}))},p=function n(t,r){return t.map((function(t){return Array.isArray(t)?n(t,r):r()}))},v=function(n){var t=n[0].length;if(!n.every((function(n){return n.length===t})))throw new Error(\"All rows in a matrix must have an equal amount of columns\");return Array(t).fill(0).map((function(t,r){return n.map((function(n){return n[r]}))}))},d=function(n){return n.replace(/\\/+$/,\"\")},g=function(n){return d(n.replace(/^(?:\\/\\/|[^/])+/,\"\"))},y=function(n){return n.replace(/[.*+\\-?^${}()|[\\]\\\\]/g,\"\\\\$&\")},w=function(n,t){var r=new RegExp(Object.keys(t).map((function(n){return y(n)})).join(\"|\"),\"g\");return n.replace(r,(function(n){return t[n]}))},M=function(n,t){var r=new RegExp(\"\".concat(t?\"(^\\\\s*\\\\+?\\\\s*(\".concat(t,\"))?\"):\"\",\"[^0-9]*\"),\"g\");return[t,n.replace(r,\"\")].filter((function(n){return!!n})).join(\"\")},b=function(n){var t=n.replace(/[^a-z]+([a-z])?/gi,(function(n,t){return t?t.toUpperCase():\"\"}));return t[0].toLowerCase()+t.slice(1)},E=function(){for(var n=arguments.length,t=new Array(n),r=0;r<n;r++)t[r]=arguments[r];for(var e=t.reduce((function(n,t){return t.split(\":\").length>n?t.split(\":\").length:n}),0),o=Array(e).fill(0).map((function(n,r){return t.reduce((function(n,e,o){return n+Number(t[o].split(\":\")[r]||0)}),0)})),u=e-2;u>=0;u--)o[u]+=Math.floor(o[u+1]/60),o[u+1]%=60;return o.map((function(n){return n<10?\"0\".concat(n):n})).join(\":\")},T=function(n){for(var t=n.slice(),r=t.length-1;r>0;r--){var e=Math.floor(Math.random()*(r+1)),o=[t[e],t[r]];t[r]=o[0],t[e]=o[1]}return t},x=function(n){var t=document.createElement(\"div\");return t.innerHTML=n,Array.from(t.children)},A=function(){return window.innerWidth-document.body.clientWidth},L=function(){return window.innerHeight-document.body.clientHeight},S=function(n){var t={};return function(){for(var r=arguments.length,e=new Array(r),o=0;o<r;o++)e[o]=arguments[o];var u=JSON.stringify(e);return t[u]||(t[u]=n.apply(void 0,e))}},j=function(n,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,e=null,o=null,u=function(){o=null,n.apply(void 0,arguments)};return function(){for(var n=arguments.length,i=new Array(n),c=0;c<n;c++)i[c]=arguments[c];o||(o=performance.now()),e&&(clearTimeout(e),e=null),r&&performance.now()-o>=r?u.apply(void 0,i):e=setTimeout((function(){return u.apply(void 0,i)}),t)}},O=function(n,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{swipeLength:50},e={startX:0,startY:0,onTouchStart:function(t){var r=t.changedTouches[0],e=r.clientX,o=r.clientY;this.startX=e,this.startY=o,n.addEventListener(\"touchend\",this.onTouchEnd),n.addEventListener(\"touchmove\",this.onTouchMove)},onTouchMove:function(e){var o=r.swipeLength,u=this.startX,i=this.startY,c=e.changedTouches[0],a=c.clientX-u,f=c.clientY-i;a>=o&&t(e,\"right\"),a<=-o&&t(e,\"left\"),f>=o&&t(e,\"down\"),f<=-o&&t(e,\"up\"),(Math.abs(a)>=o||Math.abs(f)>=o)&&(n.removeEventListener(\"touchend\",this.onTouchEnd),n.removeEventListener(\"touchmove\",this.onTouchMove))},onTouchEnd:function(){n.removeEventListener(\"touchend\",this.onTouchEnd),n.removeEventListener(\"touchmove\",this.onTouchMove)}};n.addEventListener(\"touchstart\",e.onTouchStart)},P=function(n,t){for(var r=Array(t+1).fill(0).map((function(n,t){return t})),e=2;e<=Math.sqrt(t+1);e++)for(var o=Math.pow(e,2);o<t+1;o+=e)delete r[o];return Object.values(r.slice(n))},z=function(n,t){var e=P(n,t);return e[r(0,e.length-1)]};return t}()}));","export class Cell {\n  x: number;\n  y: number;\n\n  flagged = false;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  toggleFlag() {\n    this.flagged = !this.flagged;\n  }\n}\n\nexport default Cell;\n","import Cell from './cell';\n\nexport class Step extends Cell {\n  mines: number;\n\n  constructor(x: number, y: number, mines: number) {\n    super(x, y);\n    this.mines = mines;\n  }\n}\n\nexport default Step;\n","import Cell from './cell';\n\nexport class Mine extends Cell {\n  constructor(x: number, y: number) {\n    super(x, y);\n  }\n}\n\nexport default Mine;\n","import { getRandNum, getMatrix } from '@goodleby/lib';\nimport Cell from './cell';\nimport Step from './step';\nimport Mine from './mine';\n\nexport type GameCoordinates = {\n  x: number;\n  y: number;\n};\n\nexport class Game {\n  area: number;\n  root: Element;\n  messages: HTMLElement;\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n  field: Cell[][];\n\n  _play = false;\n  fieldSize = 10;\n  cellSize = 30;\n  mines = 15;\n\n  constructor(selector: string) {\n    this.area = this.fieldSize ** 2;\n    const root = document.querySelector(selector);\n    if (!root) {\n      throw new Error('Passed `selector` did not match any DOM element');\n    }\n    this.root = root;\n    this.root.innerHTML = '';\n\n    this.messages = document.createElement('div');\n    this.messages.classList.add('messages');\n\n    this.canvas = document.createElement('canvas');\n    this.canvas.width = this.canvas.height = this.fieldSize * this.cellSize;\n    const ctx = this.canvas.getContext('2d');\n    if (!ctx) {\n      throw new Error('Canvas did not return context');\n    }\n    this.ctx = ctx;\n\n    this.root.append(this.messages);\n    this.root.append(this.canvas);\n\n    this.field = getMatrix(\n      this.fieldSize,\n      this.fieldSize,\n      (x: number, y: number) => new Cell(x, y)\n    );\n\n    this.canvas.addEventListener('click', (e) => this.handleMove(e));\n    this.canvas.addEventListener('contextmenu', (e) => this.handleFlag(e));\n\n    this.createMines();\n    this.renderField();\n    this.play();\n    this.showMessage(\n      'Click to step and right click or long press to set a flag',\n      'info'\n    );\n  }\n\n  play() {\n    this._play = true;\n  }\n\n  pause() {\n    this._play = false;\n  }\n\n  lose() {\n    this.pause();\n    this.renderMines();\n    this.showMessage('Sorry, you lost.', 'danger');\n  }\n\n  win() {\n    this.pause();\n    this.renderMines(false);\n    this.showMessage('You won!', 'success');\n  }\n\n  getRandCoords(): GameCoordinates {\n    const skipCells: number[] = [];\n\n    this.field.forEach((row) => {\n      const cells = row\n        .filter(\n          ({ x, y }) =>\n            this.checkMine(x, y) || this.checkStep(x, y) || this.checkFlag(x, y)\n        )\n        .map(({ x, y }) => x + y * this.fieldSize);\n      skipCells.push(...cells);\n    });\n\n    const cellIndex = getRandNum(0, this.area - 1, skipCells);\n    const y = Math.floor(cellIndex / this.fieldSize);\n    const x = cellIndex - y * this.fieldSize;\n\n    return { x, y };\n  }\n\n  getSurroundingCells(x: number, y: number): Cell[] {\n    const { field, fieldSize } = this;\n    const cells: Cell[] = [];\n    for (\n      let sy = Math.max(y - 1, 0);\n      sy <= Math.min(y + 1, fieldSize - 1);\n      sy++\n    ) {\n      for (\n        let sx = Math.max(x - 1, 0);\n        sx <= Math.min(x + 1, fieldSize - 1);\n        sx++\n      ) {\n        if (sx === x && sy === y) continue;\n        cells.push(field[sy][sx]);\n      }\n    }\n    return cells;\n  }\n\n  renderField() {\n    const { fieldSize, ctx, cellSize } = this;\n    ctx.fillStyle = '#000';\n    for (let x = 0; x < fieldSize; x++) {\n      for (let y = 0; y < fieldSize; y++) {\n        ctx.fillRect(\n          x * cellSize + 1,\n          y * cellSize + 1,\n          cellSize - 2,\n          cellSize - 2\n        );\n      }\n    }\n  }\n\n  clearField() {\n    const { width, height } = this.canvas;\n    this.ctx.clearRect(0, 0, width, height);\n  }\n\n  renderMines(exploded = true) {\n    const { cellSize, ctx, field } = this;\n    ctx.fillStyle = exploded ? '#f22' : '#2f2';\n    field.forEach((row) =>\n      row.forEach(({ x, y }) => {\n        if (this.checkMine(x, y)) {\n          ctx.fillRect(\n            x * cellSize + 1,\n            y * cellSize + 1,\n            cellSize - 2,\n            cellSize - 2\n          );\n        }\n      })\n    );\n  }\n\n  createMines() {\n    for (let i = 0; i < this.mines; i++) {\n      const { x, y } = this.getRandCoords();\n      this.field[y][x] = new Mine(x, y);\n    }\n  }\n\n  checkMine(x: number, y: number): boolean {\n    return this.field[y][x] instanceof Mine;\n  }\n\n  checkFlag(x: number, y: number) {\n    return this.field[y][x].flagged;\n  }\n\n  renderStep(step: Step) {\n    const { x, y } = step;\n    const { cellSize, ctx } = this;\n    ctx.fillStyle = '#aaa';\n    ctx.fillRect(\n      x * cellSize + 1,\n      y * cellSize + 1,\n      cellSize - 2,\n      cellSize - 2\n    );\n    if (step.mines > 0) {\n      ctx.fillStyle = '#000';\n      ctx.font = '25px Arial';\n      ctx.fillText(\n        step.mines.toString(),\n        x * cellSize + 8,\n        y * cellSize + cellSize - 7\n      );\n    }\n  }\n\n  step(x: number, y: number) {\n    const surrouding = this.getSurroundingCells(x, y);\n    const mines = surrouding.filter(({ x, y }) => this.checkMine(x, y)).length;\n    const step = new Step(x, y, mines);\n    this.field[y][x] = step;\n    this.renderStep(step);\n    if (mines === 0) {\n      surrouding\n        .filter(({ x, y }) => !this.checkStep(x, y))\n        .forEach(({ x, y }) => this.step(x, y));\n    }\n  }\n\n  checkStep(x: number, y: number) {\n    return this.field[y][x] instanceof Step;\n  }\n\n  renderFlag(cell: Cell) {\n    const { x, y } = cell;\n    const { ctx, cellSize } = this;\n    if (cell.flagged) {\n      ctx.fillStyle = '#ff2';\n      ctx.fillRect(\n        x * cellSize + 1,\n        y * cellSize + 1,\n        cellSize - 2,\n        cellSize - 2\n      );\n    } else {\n      ctx.fillStyle = '#000';\n      ctx.fillRect(\n        x * cellSize + 1,\n        y * cellSize + 1,\n        cellSize - 2,\n        cellSize - 2\n      );\n    }\n  }\n\n  toggleFlag(x: number, y: number) {\n    const cell = this.field[y][x];\n    cell.toggleFlag();\n    this.renderFlag(cell);\n  }\n\n  checkWin(): boolean {\n    return this.field.every((row) =>\n      row.every(({ x, y }) => this.checkStep(x, y) || this.checkMine(x, y))\n    );\n  }\n\n  handleMove(e: MouseEvent) {\n    if (!this._play) return;\n\n    const x = Math.floor(e.offsetX / this.cellSize);\n    const y = Math.floor(e.offsetY / this.cellSize);\n\n    if (this.checkFlag(x, y)) return;\n    if (this.checkMine(x, y)) return this.lose();\n    if (this.checkStep(x, y)) return;\n    this.step(x, y);\n    if (this.checkWin()) this.win();\n  }\n\n  handleFlag(e: MouseEvent) {\n    e.preventDefault();\n    if (!this._play) return;\n\n    const x = Math.floor(e.offsetX / this.cellSize);\n    const y = Math.floor(e.offsetY / this.cellSize);\n\n    if (this.checkStep(x, y)) return;\n    this.toggleFlag(x, y);\n  }\n\n  showMessage(text: string, type: 'info' | 'success' | 'danger' = 'info') {\n    const message = document.createElement('div');\n    message.classList.add('message', type);\n    message.innerText = text;\n    this.messages.append(message);\n  }\n}\n\nexport default Game;\n","import Game from './components/game';\n\nconst game = new Game('#root');\n"]}