{"version":3,"sources":["libs/matrices/index.ts","libs/math/index.ts","components/cell/Cell.ts","components/cell/Mine.ts","components/cell/Step.ts","components/cell/index.ts","components/game/index.ts","index.ts"],"names":[],"mappings":"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","file":"src.ff4772a6.js","sourceRoot":"../src","sourcesContent":["// Multiply matrices with math error handling\nexport const matrixDot = (A: number[][], B: number[][]): number[][] => {\n  // Math error handling\n  const matrices = [A, B];\n  const cols = matrices.map((item) => item[0].length);\n  if (!matrices.every((item, i) => item.every((row) => row.length === cols[i]))) {\n    throw new Error('All rows in a matrix must have equal amount of columns');\n  } else if (cols[0] !== B.length) {\n    throw new Error(\n      'Amount of columns in the 1st matrix must match amount of rows in the 2nd matrix'\n    );\n  }\n  // Calculations\n  return A.map((rowA) =>\n    B[0].map((_, colBIndex) =>\n      rowA.reduce((acc, itemA, rowBIndex) => acc + itemA * B[rowBIndex][colBIndex], 0)\n    )\n  );\n};\n\n// Add up matrices with math error handling\nexport const matrixPlus = (A: number[][], B: number[][]): number[][] => {\n  // Math error handling\n  const matrices = [A, B];\n  const cols = A[0].length;\n  if (\n    !matrices.every((item) => item.every((row) => row.length === cols)) ||\n    A.length !== B.length\n  ) {\n    throw new Error('Matrices must be the same size');\n  }\n  // Calculations\n  return A.map((rowA, rowI) => rowA.map((itemA, colI) => itemA + B[rowI][colI]));\n};\n\n// Substract matrices with math error handling\nexport const matrixMinus = (A: number[][], B: number[][]): number[][] => {\n  // Math error handling\n  const matrices = [A, B];\n  const cols = A[0].length;\n  if (\n    !matrices.every((item) => item.every((row) => row.length === cols)) ||\n    A.length !== B.length\n  ) {\n    throw new Error('Matrices must be the same size');\n  }\n  // Calculations\n  return A.map((rowA, rowI) => rowA.map((itemA, colI) => itemA - B[rowI][colI]));\n};\n\n// Regular multiplication between matrices' corresponding items\nexport const linearMatrixDot = (A: number[][], B: number[][]): number[][] => {\n  // Math error handling\n  const matrices = [A, B];\n  const cols = A[0].length;\n  if (\n    !matrices.every((item) => item.every((row) => row.length === cols)) ||\n    A.length !== B.length\n  ) {\n    throw new Error('Matrices must be the same size');\n  }\n  // Calculations\n  return A.map((rowA, i) => rowA.map((colA, j) => colA * B[i][j]));\n};\n\n// Apply a function to each matrix item\nexport const matrixApply = (matrix: any[][], fn: (item: any) => any): any[][] =>\n  matrix.map((row) => row.map((item) => fn(item)));\n\n// Get custom filled matrix with set `rows` and `columns`\nexport const getMatrix = (\n  rows: number,\n  columns: number,\n  fillFunction: (x: number, y: number) => any = () => 0\n): any[][] =>\n  Array(rows)\n    .fill(0)\n    .map((_, y) =>\n      Array(columns)\n        .fill(0)\n        .map((_, x) => fillFunction(x, y))\n    );\n\n// Get custom filled matrix clone\nexport const getMatrixClone = (matrix: any[], fillFunction: () => any = () => 0): any[] =>\n  matrix.map((item) =>\n    Array.isArray(item) ? getMatrixClone(item, fillFunction) : fillFunction()\n  );\n\n// Reverse matrix shape\nexport const transposeMatrix = (matrix: any[][]): any[][] => {\n  // Math error handling\n  const cols = matrix[0].length;\n  if (!matrix.every((row) => row.length === cols)) {\n    throw new Error('All rows in a matrix must have equal amount of columns');\n  }\n  // Transformations\n  return Array(cols)\n    .fill(0)\n    .map((_, i) => matrix.map((item) => item[i]));\n};\n","// Get random number with min and max including both. Also you can exclude some numbers from output by passing excluded array as third parameter\nexport const getRandNum = (min: number, max: number, excluded: number[] = []): number => {\n  let num = Math.floor(Math.random() * (max - min + 1 - excluded.length) + min);\n  excluded.sort((a, b) => a - b).every((exeption) => exeption <= num && (num++ || true));\n  return num;\n};\n\n// Get random boolean value with success rate\nexport const getRandBool = (rate: number = 0.5): boolean => Math.random() < rate;\n\n// Round to demanded amount of decimals only if needed\nexport const roundTo = (number: number, decimals: number = 0): number =>\n  Math.round(number * 10 ** decimals) / 10 ** decimals;\n\n// Floor to demanded amount of decimals only if needed\nexport const floorTo = (number: number, decimals: number = 0): number =>\n  Math.floor(number * 10 ** decimals) / 10 ** decimals;\n\n// Ceil to demanded amount of decimals only if needed\nexport const ceilTo = (number: number, decimals: number = 0): number =>\n  Math.ceil(number * 10 ** decimals) / 10 ** decimals;\n\n// Get amount of decimals in a number\nexport const countDecimals = (number: number): number =>\n  Math.floor(number) !== number ? number.toString().split('.')[1].length : 0;\n\n// Get average number between all pagetrameters\nexport const avg = (...numbers: number[]): number =>\n  numbers.reduce((acc, item) => acc + item) / numbers.length;\n\n// Find Gratest Common Divisor of two numbers\nexport const gcd = (a: number, b: number): number => (b === 0 ? a : gcd(b, a % b));\n","export class Cell {\n  x: number;\n  y: number;\n\n  flagged = false;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  toggleFlag() {\n    this.flagged = !this.flagged;\n  }\n}\n","import { Cell } from './Cell';\n\nexport class Mine extends Cell {\n  constructor(x: number, y: number) {\n    super(x, y);\n  }\n}\n","import { Cell } from './Cell';\n\nexport class Step extends Cell {\n  mines: number;\n\n  constructor(x: number, y: number, mines: number) {\n    super(x, y);\n    this.mines = mines;\n  }\n}\n","import { Cell } from './Cell';\nimport { Mine } from './Mine';\nimport { Step } from './Step';\n\nexport { Cell, Mine, Step };\n","import { getMatrix } from '../../libs/matrices';\nimport { getRandNum } from '../../libs/math';\nimport { GameCoordinates } from '../../interfaces';\nimport { Cell, Mine, Step } from '../cell';\n\nexport class Game {\n  _play: boolean;\n  area: number;\n  root: HTMLElement;\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n  field: Cell[][];\n\n  fieldSize = 10;\n  cellSize = 30;\n  mines = 15;\n\n  constructor(selector: string) {\n    this.area = this.fieldSize ** 2;\n    this.root = document.querySelector(selector);\n    this.root.innerHTML = '';\n\n    this.canvas = document.createElement('canvas');\n    this.canvas.width = this.canvas.height = this.fieldSize * this.cellSize;\n    this.ctx = this.canvas.getContext('2d');\n\n    this.root.append(this.canvas);\n\n    this.field = getMatrix(this.fieldSize, this.fieldSize, (x, y) => new Cell(x, y));\n\n    this.canvas.addEventListener('click', (e) => this.handleMove(e));\n    this.canvas.addEventListener('contextmenu', (e) => this.handleFlag(e));\n\n    this.createMines();\n    this.renderField();\n    this.play();\n  }\n\n  play() {\n    this._play = true;\n  }\n\n  pause() {\n    this._play = false;\n  }\n\n  lose() {\n    this.pause();\n    this.renderMines();\n    console.log('Sorry, you lost');\n  }\n\n  win() {\n    this.pause();\n    this.renderMines(false);\n    console.log('You won!');\n  }\n\n  getRandCoords(): GameCoordinates {\n    const skipCells: number[] = [];\n\n    this.field.forEach((row) => {\n      const cells = row\n        .filter(\n          ({ x, y }) => this.checkMine(x, y) || this.checkStep(x, y) || this.checkFlag(x, y)\n        )\n        .map(({ x, y }) => x + y * this.fieldSize);\n      skipCells.push(...cells);\n    });\n\n    const cellIndex = getRandNum(0, this.area - 1, skipCells);\n    const y = Math.floor(cellIndex / this.fieldSize);\n    const x = cellIndex - y * this.fieldSize;\n\n    return { x, y };\n  }\n\n  getSurroundingCells(x: number, y: number): Cell[] {\n    const { field, fieldSize } = this;\n    const cells: Cell[] = [];\n    for (let sy = Math.max(y - 1, 0); sy <= Math.min(y + 1, fieldSize - 1); sy++) {\n      for (let sx = Math.max(x - 1, 0); sx <= Math.min(x + 1, fieldSize - 1); sx++) {\n        if (sx === x && sy === y) continue;\n        cells.push(field[sy][sx]);\n      }\n    }\n    return cells;\n  }\n\n  renderField() {\n    const { fieldSize, ctx, cellSize } = this;\n    ctx.fillStyle = '#000';\n    for (let x = 0; x < fieldSize; x++) {\n      for (let y = 0; y < fieldSize; y++) {\n        ctx.fillRect(x * cellSize + 1, y * cellSize + 1, cellSize - 2, cellSize - 2);\n      }\n    }\n  }\n\n  clearField() {\n    const { width, height } = this.canvas;\n    this.ctx.clearRect(0, 0, width, height);\n  }\n\n  renderMines(exploded = true) {\n    const { cellSize, ctx, field } = this;\n    ctx.fillStyle = exploded ? '#f22' : '#2f2';\n    field.forEach((row) =>\n      row.forEach(({ x, y }) => {\n        if (this.checkMine(x, y)) {\n          ctx.fillRect(x * cellSize + 1, y * cellSize + 1, cellSize - 2, cellSize - 2);\n        }\n      })\n    );\n  }\n\n  createMines() {\n    for (let i = 0; i < this.mines; i++) {\n      const { x, y } = this.getRandCoords();\n      this.field[y][x] = new Mine(x, y);\n    }\n  }\n\n  checkMine(x: number, y: number): boolean {\n    return this.field[y][x] instanceof Mine;\n  }\n\n  checkFlag(x: number, y: number) {\n    return this.field[y][x].flagged;\n  }\n\n  renderStep(step: Step) {\n    const { x, y } = step;\n    const { cellSize, ctx } = this;\n    ctx.fillStyle = '#aaa';\n    ctx.fillRect(x * cellSize + 1, y * cellSize + 1, cellSize - 2, cellSize - 2);\n    if (step.mines > 0) {\n      ctx.fillStyle = '#000';\n      ctx.font = '25px Arial';\n      ctx.fillText(step.mines.toString(), x * cellSize + 8, y * cellSize + cellSize - 7);\n    }\n  }\n\n  step(x: number, y: number) {\n    const surrouding = this.getSurroundingCells(x, y);\n    const mines = surrouding.filter(({ x, y }) => this.checkMine(x, y)).length;\n    const step = new Step(x, y, mines);\n    this.field[y][x] = step;\n    this.renderStep(step);\n    if (mines === 0) {\n      surrouding\n        .filter(({ x, y }) => !this.checkStep(x, y))\n        .forEach(({ x, y }) => this.step(x, y));\n    }\n  }\n\n  checkStep(x: number, y: number) {\n    return this.field[y][x] instanceof Step;\n  }\n\n  renderFlag(cell: Cell) {\n    const { x, y } = cell;\n    const { ctx, cellSize } = this;\n    if (cell.flagged) {\n      ctx.fillStyle = '#ff2';\n      ctx.fillRect(x * cellSize + 1, y * cellSize + 1, cellSize - 2, cellSize - 2);\n    } else {\n      ctx.fillStyle = '#000';\n      ctx.fillRect(x * cellSize + 1, y * cellSize + 1, cellSize - 2, cellSize - 2);\n    }\n  }\n\n  toggleFlag(x: number, y: number) {\n    const cell = this.field[y][x];\n    cell.toggleFlag();\n    this.renderFlag(cell);\n  }\n\n  checkWin(): boolean {\n    return this.field.every((row) =>\n      row.every(({ x, y }) => this.checkStep(x, y) || this.checkMine(x, y))\n    );\n  }\n\n  handleMove(e: MouseEvent) {\n    if (!this._play) return;\n\n    const x = Math.floor(e.offsetX / this.cellSize);\n    const y = Math.floor(e.offsetY / this.cellSize);\n\n    if (this.checkFlag(x, y)) return;\n    if (this.checkMine(x, y)) return this.lose();\n    if (this.checkStep(x, y)) return;\n    this.step(x, y);\n    if (this.checkWin()) this.win();\n  }\n\n  handleFlag(e: MouseEvent) {\n    e.preventDefault();\n    if (!this._play) return;\n\n    const x = Math.floor(e.offsetX / this.cellSize);\n    const y = Math.floor(e.offsetY / this.cellSize);\n\n    if (this.checkStep(x, y)) return;\n    this.toggleFlag(x, y);\n  }\n}\n","import { Game } from './components/game';\n\nconst game = new Game('#root');\n"]}